# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.20
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mailchimp_marketing.api_client import ApiClient


class AutomationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client):
        self.api_client = api_client

    def archive(self, workflow_id, **kwargs):  # noqa: E501
        """Archive automation  # noqa: E501

        Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.archive_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.archive_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def archive_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Archive automation  # noqa: E501

        Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/actions/archive', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflow_email(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Delete workflow email  # noqa: E501

        Removes an individual Automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_email(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
            return data

    def delete_workflow_email_with_http_info(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Delete workflow email  # noqa: E501

        Removes an individual Automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_email_with_http_info(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self, **kwargs):  # noqa: E501
        """List automations  # noqa: E501

        Get a summary of an account's Automations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param datetime before_create_time: Restrict the response to automations created before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param datetime since_create_time: Restrict the response to automations created after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param datetime before_send_time: Restrict the response to automations sent before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param datetime since_send_time: Restrict the response to automations sent after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str status: Restrict the results to automations with the specified status.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_with_http_info(self, **kwargs):  # noqa: E501
        """List automations  # noqa: E501

        Get a summary of an account's Automations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param datetime before_create_time: Restrict the response to automations created before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param datetime since_create_time: Restrict the response to automations created after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param datetime before_send_time: Restrict the response to automations sent before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param datetime since_send_time: Restrict the response to automations sent after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str status: Restrict the results to automations with the specified status.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'offset', 'fields', 'exclude_fields', 'before_create_time', 'since_create_time', 'before_send_time', 'since_send_time', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'before_create_time' in params:
            query_params.append(('before_create_time', params['before_create_time']))  # noqa: E501
        if 'since_create_time' in params:
            query_params.append(('since_create_time', params['since_create_time']))  # noqa: E501
        if 'before_send_time' in params:
            query_params.append(('before_send_time', params['before_send_time']))  # noqa: E501
        if 'since_send_time' in params:
            query_params.append(('since_send_time', params['since_send_time']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, workflow_id, **kwargs):  # noqa: E501
        """Get automation info  # noqa: E501

        Get a summary of an individual Automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: AutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Get automation info  # noqa: E501

        Get a summary of an individual Automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: AutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationWorkflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_workflow_emails(self, workflow_id, **kwargs):  # noqa: E501
        """List automated emails  # noqa: E501

        Get a summary of the emails in an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_workflow_emails(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: AutomationEmails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_workflow_emails_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_all_workflow_emails_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def list_all_workflow_emails_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """List automated emails  # noqa: E501

        Get a summary of the emails in an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_workflow_emails_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: AutomationEmails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_workflow_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationEmails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_email(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Get workflow email info  # noqa: E501

        Get information about an individual Automation workflow email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_email(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: AutomationWorkflowEmail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_email_with_http_info(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Get workflow email info  # noqa: E501

        Get information about an individual Automation workflow email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_email_with_http_info(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: AutomationWorkflowEmail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationWorkflowEmail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_email_subscriber_queue(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """List automated email subscribers  # noqa: E501

        Get information about an Automation email queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_email_subscriber_queue(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_email_subscriber_queue_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_email_subscriber_queue_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_email_subscriber_queue_with_http_info(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """List automated email subscribers  # noqa: E501

        Get information about an Automation email queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_email_subscriber_queue_with_http_info(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_email_subscriber_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_email_subscriber(self, workflow_id, workflow_email_id, subscriber_hash, **kwargs):  # noqa: E501
        """Get automated email subscriber  # noqa: E501

        Get information about a specific subscriber in an Automation email queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_email_subscriber(workflow_id, workflow_email_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: SubscriberInAutomationQueue2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_email_subscriber_with_http_info(workflow_id, workflow_email_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_email_subscriber_with_http_info(workflow_id, workflow_email_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_workflow_email_subscriber_with_http_info(self, workflow_id, workflow_email_id, subscriber_hash, **kwargs):  # noqa: E501
        """Get automated email subscriber  # noqa: E501

        Get information about a specific subscriber in an Automation email queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_email_subscriber_with_http_info(workflow_id, workflow_email_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: SubscriberInAutomationQueue2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id', 'subscriber_hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_email_subscriber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberInAutomationQueue2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_workflow_email_subscribers_removed(self, workflow_id, **kwargs):  # noqa: E501
        """List subscribers removed from workflow  # noqa: E501

        Get information about subscribers who were removed from an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_email_subscribers_removed(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: RemovedSubscribers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_workflow_email_subscribers_removed_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_workflow_email_subscribers_removed_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def list_workflow_email_subscribers_removed_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """List subscribers removed from workflow  # noqa: E501

        Get information about subscribers who were removed from an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workflow_email_subscribers_removed_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: RemovedSubscribers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workflow_email_subscribers_removed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/removed-subscribers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemovedSubscribers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_removed_workflow_email_subscriber(self, workflow_id, subscriber_hash, **kwargs):  # noqa: E501
        """Get subscriber removed from workflow  # noqa: E501

        Get information about a specific subscriber who was removed from an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_removed_workflow_email_subscriber(workflow_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: SubscriberRemovedFromAutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_removed_workflow_email_subscriber_with_http_info(workflow_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_removed_workflow_email_subscriber_with_http_info(workflow_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_removed_workflow_email_subscriber_with_http_info(self, workflow_id, subscriber_hash, **kwargs):  # noqa: E501
        """Get subscriber removed from workflow  # noqa: E501

        Get information about a specific subscriber who was removed from an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_removed_workflow_email_subscriber_with_http_info(workflow_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: SubscriberRemovedFromAutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'subscriber_hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_removed_workflow_email_subscriber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/removed-subscribers/{subscriber_hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberRemovedFromAutomationWorkflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_workflow_email(self, workflow_id, workflow_email_id, body, **kwargs):  # noqa: E501
        """Update workflow email  # noqa: E501

        Update settings for a Automation workflow email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_email(workflow_id, workflow_email_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :param UpdateInformationAboutASpecificWorkflowEmail body:  (required)
        :return: AutomationWorkflowEmail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_workflow_email_with_http_info(workflow_id, workflow_email_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_workflow_email_with_http_info(workflow_id, workflow_email_id, body, **kwargs)  # noqa: E501
            return data

    def update_workflow_email_with_http_info(self, workflow_id, workflow_email_id, body, **kwargs):  # noqa: E501
        """Update workflow email  # noqa: E501

        Update settings for a Automation workflow email  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_email_with_http_info(workflow_id, workflow_email_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :param UpdateInformationAboutASpecificWorkflowEmail body:  (required)
        :return: AutomationWorkflowEmail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workflow_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationWorkflowEmail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, workflow_id, body, **kwargs):  # noqa: E501
        """Update automation  # noqa: E501

        Update some or all of the settings for a Automation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(workflow_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param UpdateAnAutomation_ body:  (required)
        :return: AutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(workflow_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(workflow_id, body, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, workflow_id, body, **kwargs):  # noqa: E501
        """Update automation  # noqa: E501

        Update some or all of the settings for a Automation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(workflow_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param UpdateAnAutomation_ body:  (required)
        :return: AutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationWorkflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create(self, body, **kwargs):  # noqa: E501
        """Add automation  # noqa: E501

        Create a new Automation in your Mailchimp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutomationWorkflow1 body:  (required)
        :return: AutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add automation  # noqa: E501

        Create a new Automation in your Mailchimp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutomationWorkflow1 body:  (required)
        :return: AutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationWorkflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_all_emails(self, workflow_id, **kwargs):  # noqa: E501
        """Pause automation emails  # noqa: E501

        Pause all emails in a specific Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_all_emails(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pause_all_emails_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_all_emails_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def pause_all_emails_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Pause automation emails  # noqa: E501

        Pause all emails in a specific Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_all_emails_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_all_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/actions/pause-all-emails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_all_emails(self, workflow_id, **kwargs):  # noqa: E501
        """Start automation emails  # noqa: E501

        Start all emails in an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_all_emails(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_all_emails_with_http_info(workflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_all_emails_with_http_info(workflow_id, **kwargs)  # noqa: E501
            return data

    def start_all_emails_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Start automation emails  # noqa: E501

        Start all emails in an Automation workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_all_emails_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_all_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/actions/start-all-emails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_workflow_email(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Pause automated email  # noqa: E501

        Pause an automated email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_workflow_email(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pause_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
            return data

    def pause_workflow_email_with_http_info(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Pause automated email  # noqa: E501

        Pause an automated email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_workflow_email_with_http_info(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_workflow_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_workflow_email(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Start automated email  # noqa: E501

        Start an automated email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_workflow_email(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_workflow_email_with_http_info(workflow_id, workflow_email_id, **kwargs)  # noqa: E501
            return data

    def start_workflow_email_with_http_info(self, workflow_id, workflow_email_id, **kwargs):  # noqa: E501
        """Start automated email  # noqa: E501

        Start an automated email.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_workflow_email_with_http_info(workflow_id, workflow_email_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_workflow_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}/actions/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_workflow_email_subscriber(self, workflow_id, workflow_email_id, body, **kwargs):  # noqa: E501
        """Add subscriber to workflow email  # noqa: E501

        Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_workflow_email_subscriber(workflow_id, workflow_email_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :param SubscriberInAutomationQueue1 body:  (required)
        :return: SubscriberInAutomationQueue2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_workflow_email_subscriber_with_http_info(workflow_id, workflow_email_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_workflow_email_subscriber_with_http_info(workflow_id, workflow_email_id, body, **kwargs)  # noqa: E501
            return data

    def add_workflow_email_subscriber_with_http_info(self, workflow_id, workflow_email_id, body, **kwargs):  # noqa: E501
        """Add subscriber to workflow email  # noqa: E501

        Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_workflow_email_subscriber_with_http_info(workflow_id, workflow_email_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param str workflow_email_id: The unique id for the Automation workflow email. (required)
        :param SubscriberInAutomationQueue1 body:  (required)
        :return: SubscriberInAutomationQueue2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'workflow_email_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_workflow_email_subscriber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'workflow_email_id' is set
        if ('workflow_email_id' not in params or
                params['workflow_email_id'] is None):
            raise ValueError("Missing the required parameter `workflow_email_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501
        if 'workflow_email_id' in params:
            path_params['workflow_email_id'] = params['workflow_email_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberInAutomationQueue2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_workflow_email_subscriber(self, workflow_id, body, **kwargs):  # noqa: E501
        """Remove subscriber from workflow  # noqa: E501

        Remove a subscriber from a specific Automation workflow. You can remove a subscriber at any point in an Automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_workflow_email_subscriber(workflow_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param SubscriberInAutomationQueue3 body:  (required)
        :return: SubscriberRemovedFromAutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_workflow_email_subscriber_with_http_info(workflow_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_workflow_email_subscriber_with_http_info(workflow_id, body, **kwargs)  # noqa: E501
            return data

    def remove_workflow_email_subscriber_with_http_info(self, workflow_id, body, **kwargs):  # noqa: E501
        """Remove subscriber from workflow  # noqa: E501

        Remove a subscriber from a specific Automation workflow. You can remove a subscriber at any point in an Automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_workflow_email_subscriber_with_http_info(workflow_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_id: The unique id for the Automation workflow. (required)
        :param SubscriberInAutomationQueue3 body:  (required)
        :return: SubscriberRemovedFromAutomationWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_workflow_email_subscriber" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if ('workflow_id' not in params or
                params['workflow_id'] is None):
            raise ValueError("Missing the required parameter `workflow_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in params:
            path_params['workflow_id'] = params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{workflow_id}/removed-subscribers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberRemovedFromAutomationWorkflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
