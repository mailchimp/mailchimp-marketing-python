# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.20
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mailchimp_marketing.api_client import ApiClient


class EcommerceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client):
        self.api_client = api_client

    def delete_store(self, store_id, **kwargs):  # noqa: E501
        """Delete store  # noqa: E501

        Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_store_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_store_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def delete_store_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Delete store  # noqa: E501

        Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_store_cart(self, store_id, cart_id, **kwargs):  # noqa: E501
        """Delete cart  # noqa: E501

        Delete a cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_cart(store_id, cart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_store_cart_with_http_info(store_id, cart_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_store_cart_with_http_info(store_id, cart_id, **kwargs)  # noqa: E501
            return data

    def delete_store_cart_with_http_info(self, store_id, cart_id, **kwargs):  # noqa: E501
        """Delete cart  # noqa: E501

        Delete a cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_cart_with_http_info(store_id, cart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_store_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cart_line_item(self, store_id, cart_id, line_id, **kwargs):  # noqa: E501
        """Delete cart line item  # noqa: E501

        Delete a specific cart line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cart_line_item(store_id, cart_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param str line_id: The id for the line item of a cart. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cart_line_item_with_http_info(store_id, cart_id, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cart_line_item_with_http_info(store_id, cart_id, line_id, **kwargs)  # noqa: E501
            return data

    def delete_cart_line_item_with_http_info(self, store_id, cart_id, line_id, **kwargs):  # noqa: E501
        """Delete cart line item  # noqa: E501

        Delete a specific cart line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cart_line_item_with_http_info(store_id, cart_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param str line_id: The id for the line item of a cart. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id', 'line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cart_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_store_customer(self, store_id, customer_id, **kwargs):  # noqa: E501
        """Delete customer  # noqa: E501

        Delete a customer from a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_customer(store_id, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_store_customer_with_http_info(store_id, customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_store_customer_with_http_info(store_id, customer_id, **kwargs)  # noqa: E501
            return data

    def delete_store_customer_with_http_info(self, store_id, customer_id, **kwargs):  # noqa: E501
        """Delete customer  # noqa: E501

        Delete a customer from a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_customer_with_http_info(store_id, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_store_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/customers/{customer_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_order(self, store_id, order_id, **kwargs):  # noqa: E501
        """Delete order  # noqa: E501

        Delete an order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_order(store_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_order_with_http_info(store_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_order_with_http_info(store_id, order_id, **kwargs)  # noqa: E501
            return data

    def delete_order_with_http_info(self, store_id, order_id, **kwargs):  # noqa: E501
        """Delete order  # noqa: E501

        Delete an order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_order_with_http_info(store_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_order_line_item(self, store_id, order_id, line_id, **kwargs):  # noqa: E501
        """Delete order line item  # noqa: E501

        Delete a specific order line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_order_line_item(store_id, order_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param str line_id: The id for the line item of an order. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_order_line_item_with_http_info(store_id, order_id, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_order_line_item_with_http_info(store_id, order_id, line_id, **kwargs)  # noqa: E501
            return data

    def delete_order_line_item_with_http_info(self, store_id, order_id, line_id, **kwargs):  # noqa: E501
        """Delete order line item  # noqa: E501

        Delete a specific order line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_order_line_item_with_http_info(store_id, order_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param str line_id: The id for the line item of an order. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id', 'line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_order_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_store_product(self, store_id, product_id, **kwargs):  # noqa: E501
        """Delete product  # noqa: E501

        Delete a product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_product(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_store_product_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_store_product_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
            return data

    def delete_store_product_with_http_info(self, store_id, product_id, **kwargs):  # noqa: E501
        """Delete product  # noqa: E501

        Delete a product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_product_with_http_info(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_store_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_product_image(self, store_id, product_id, image_id, **kwargs):  # noqa: E501
        """Delete product image  # noqa: E501

        Delete a product image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_product_image(store_id, product_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str image_id: The id for the product image. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_product_image_with_http_info(store_id, product_id, image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_product_image_with_http_info(store_id, product_id, image_id, **kwargs)  # noqa: E501
            return data

    def delete_product_image_with_http_info(self, store_id, product_id, image_id, **kwargs):  # noqa: E501
        """Delete product image  # noqa: E501

        Delete a product image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_product_image_with_http_info(store_id, product_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str image_id: The id for the product image. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_product_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_product_variant(self, store_id, product_id, variant_id, **kwargs):  # noqa: E501
        """Delete product variant  # noqa: E501

        Delete a product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_product_variant(store_id, product_id, variant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_product_variant_with_http_info(store_id, product_id, variant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_product_variant_with_http_info(store_id, product_id, variant_id, **kwargs)  # noqa: E501
            return data

    def delete_product_variant_with_http_info(self, store_id, product_id, variant_id, **kwargs):  # noqa: E501
        """Delete product variant  # noqa: E501

        Delete a product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_product_variant_with_http_info(store_id, product_id, variant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'variant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_product_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'variant_id' is set
        if ('variant_id' not in params or
                params['variant_id'] is None):
            raise ValueError("Missing the required parameter `variant_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501
        if 'variant_id' in params:
            path_params['variant_id'] = params['variant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_promo_code(self, store_id, promo_rule_id, promo_code_id, **kwargs):  # noqa: E501
        """Delete promo code  # noqa: E501

        Delete a promo code from a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_promo_code(store_id, promo_rule_id, promo_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str promo_code_id: The id for the promo code of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, **kwargs)  # noqa: E501
            return data

    def delete_promo_code_with_http_info(self, store_id, promo_rule_id, promo_code_id, **kwargs):  # noqa: E501
        """Delete promo code  # noqa: E501

        Delete a promo code from a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str promo_code_id: The id for the promo code of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'promo_rule_id', 'promo_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_promo_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_code_id' is set
        if ('promo_code_id' not in params or
                params['promo_code_id'] is None):
            raise ValueError("Missing the required parameter `promo_code_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501
        if 'promo_code_id' in params:
            path_params['promo_code_id'] = params['promo_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_promo_rule(self, store_id, promo_rule_id, **kwargs):  # noqa: E501
        """Delete promo rule  # noqa: E501

        Delete a promo rule from a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_promo_rule(store_id, promo_rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_promo_rule_with_http_info(store_id, promo_rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_promo_rule_with_http_info(store_id, promo_rule_id, **kwargs)  # noqa: E501
            return data

    def delete_promo_rule_with_http_info(self, store_id, promo_rule_id, **kwargs):  # noqa: E501
        """Delete promo rule  # noqa: E501

        Delete a promo rule from a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_promo_rule_with_http_info(store_id, promo_rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'promo_rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_promo_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def info(self, **kwargs):  # noqa: E501
        """List e commerce api resources  # noqa: E501

        Get information about the e-commerce endpoint's resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EcommerceRoot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.info_with_http_info(**kwargs)  # noqa: E501
            return data

    def info_with_http_info(self, **kwargs):  # noqa: E501
        """List e commerce api resources  # noqa: E501

        Get information about the e-commerce endpoint's resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EcommerceRoot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceRoot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders(self, **kwargs):  # noqa: E501
        """List account orders  # noqa: E501

        Get information about an account's orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str campaign_id: Restrict results to orders with a specific `campaign_id` value.
        :param str outreach_id: Restrict results to orders with a specific `outreach_id` value.
        :param str customer_id: Restrict results to orders made by a specific customer.
        :param bool has_outreach: Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
        :return: Orders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def orders_with_http_info(self, **kwargs):  # noqa: E501
        """List account orders  # noqa: E501

        Get information about an account's orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str campaign_id: Restrict results to orders with a specific `campaign_id` value.
        :param str outreach_id: Restrict results to orders with a specific `outreach_id` value.
        :param str customer_id: Restrict results to orders made by a specific customer.
        :param bool has_outreach: Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
        :return: Orders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'exclude_fields', 'count', 'offset', 'campaign_id', 'outreach_id', 'customer_id', 'has_outreach']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders" % key
                )
            params[key] = val
        del params['kwargs']

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'campaign_id' in params:
            query_params.append(('campaign_id', params['campaign_id']))  # noqa: E501
        if 'outreach_id' in params:
            query_params.append(('outreach_id', params['outreach_id']))  # noqa: E501
        if 'customer_id' in params:
            query_params.append(('customer_id', params['customer_id']))  # noqa: E501
        if 'has_outreach' in params:
            query_params.append(('has_outreach', params['has_outreach']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Orders',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stores(self, **kwargs):  # noqa: E501
        """List stores  # noqa: E501

        Get information about all stores in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stores(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: EcommerceStores
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stores_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stores_with_http_info(**kwargs)  # noqa: E501
            return data

    def stores_with_http_info(self, **kwargs):  # noqa: E501
        """List stores  # noqa: E501

        Get information about all stores in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stores_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: EcommerceStores
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stores" % key
                )
            params[key] = val
        del params['kwargs']

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceStores',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store(self, store_id, **kwargs):  # noqa: E501
        """Get store info  # noqa: E501

        Get information about a specific store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceStore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_store_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def get_store_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """Get store info  # noqa: E501

        Get information about a specific store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceStore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceStore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store_carts(self, store_id, **kwargs):  # noqa: E501
        """List carts  # noqa: E501

        Get information about a store's carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_carts(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: Carts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_store_carts_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_carts_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def get_store_carts_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """List carts  # noqa: E501

        Get information about a store's carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_carts_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: Carts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store_carts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Carts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store_cart(self, store_id, cart_id, **kwargs):  # noqa: E501
        """Get cart info  # noqa: E501

        Get information about a specific cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_cart(store_id, cart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceCart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_store_cart_with_http_info(store_id, cart_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_cart_with_http_info(store_id, cart_id, **kwargs)  # noqa: E501
            return data

    def get_store_cart_with_http_info(self, store_id, cart_id, **kwargs):  # noqa: E501
        """Get cart info  # noqa: E501

        Get information about a specific cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_cart_with_http_info(store_id, cart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceCart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_cart_line_items(self, store_id, cart_id, **kwargs):  # noqa: E501
        """List cart line items  # noqa: E501

        Get information about a cart's line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cart_line_items(store_id, cart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: CartLines
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_cart_line_items_with_http_info(store_id, cart_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_cart_line_items_with_http_info(store_id, cart_id, **kwargs)  # noqa: E501
            return data

    def get_all_cart_line_items_with_http_info(self, store_id, cart_id, **kwargs):  # noqa: E501
        """List cart line items  # noqa: E501

        Get information about a cart's line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cart_line_items_with_http_info(store_id, cart_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: CartLines
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_cart_line_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CartLines',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cart_line_item(self, store_id, cart_id, line_id, **kwargs):  # noqa: E501
        """Get cart line item  # noqa: E501

        Get information about a specific cart line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cart_line_item(store_id, cart_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param str line_id: The id for the line item of a cart. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceCartLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cart_line_item_with_http_info(store_id, cart_id, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cart_line_item_with_http_info(store_id, cart_id, line_id, **kwargs)  # noqa: E501
            return data

    def get_cart_line_item_with_http_info(self, store_id, cart_id, line_id, **kwargs):  # noqa: E501
        """Get cart line item  # noqa: E501

        Get information about a specific cart line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cart_line_item_with_http_info(store_id, cart_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param str line_id: The id for the line item of a cart. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceCartLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id', 'line_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cart_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCartLineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_store_customers(self, store_id, **kwargs):  # noqa: E501
        """List customers  # noqa: E501

        Get information about a store's customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_store_customers(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str email_address: Restrict the response to customers with the email address.
        :return: Customers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_store_customers_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_store_customers_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def get_all_store_customers_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """List customers  # noqa: E501

        Get information about a store's customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_store_customers_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str email_address: Restrict the response to customers with the email address.
        :return: Customers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'fields', 'exclude_fields', 'count', 'offset', 'email_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_store_customers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'email_address' in params:
            query_params.append(('email_address', params['email_address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/customers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Customers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store_customer(self, store_id, customer_id, **kwargs):  # noqa: E501
        """Get customer info  # noqa: E501

        Get information about a specific customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_customer(store_id, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_store_customer_with_http_info(store_id, customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_customer_with_http_info(store_id, customer_id, **kwargs)  # noqa: E501
            return data

    def get_store_customer_with_http_info(self, store_id, customer_id, **kwargs):  # noqa: E501
        """Get customer info  # noqa: E501

        Get information about a specific customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_customer_with_http_info(store_id, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'customer_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/customers/{customer_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCustomer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store_orders(self, store_id, **kwargs):  # noqa: E501
        """List orders  # noqa: E501

        Get information about a store's orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_orders(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str customer_id: Restrict results to orders made by a specific customer.
        :param bool has_outreach: Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
        :param str campaign_id: Restrict results to orders with a specific `campaign_id` value.
        :param str outreach_id: Restrict results to orders with a specific `outreach_id` value.
        :return: Orders1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_store_orders_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_orders_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def get_store_orders_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """List orders  # noqa: E501

        Get information about a store's orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_orders_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str customer_id: Restrict results to orders made by a specific customer.
        :param bool has_outreach: Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.
        :param str campaign_id: Restrict results to orders with a specific `campaign_id` value.
        :param str outreach_id: Restrict results to orders with a specific `outreach_id` value.
        :return: Orders1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'fields', 'exclude_fields', 'count', 'offset', 'customer_id', 'has_outreach', 'campaign_id', 'outreach_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'customer_id' in params:
            query_params.append(('customer_id', params['customer_id']))  # noqa: E501
        if 'has_outreach' in params:
            query_params.append(('has_outreach', params['has_outreach']))  # noqa: E501
        if 'campaign_id' in params:
            query_params.append(('campaign_id', params['campaign_id']))  # noqa: E501
        if 'outreach_id' in params:
            query_params.append(('outreach_id', params['outreach_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Orders1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order(self, store_id, order_id, **kwargs):  # noqa: E501
        """Get order info  # noqa: E501

        Get information about a specific order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order(store_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_with_http_info(store_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_with_http_info(store_id, order_id, **kwargs)  # noqa: E501
            return data

    def get_order_with_http_info(self, store_id, order_id, **kwargs):  # noqa: E501
        """Get order info  # noqa: E501

        Get information about a specific order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_with_http_info(store_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_order_line_items(self, store_id, order_id, **kwargs):  # noqa: E501
        """List order line items  # noqa: E501

        Get information about an order's line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_order_line_items(store_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: OrderLines
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_order_line_items_with_http_info(store_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_order_line_items_with_http_info(store_id, order_id, **kwargs)  # noqa: E501
            return data

    def get_all_order_line_items_with_http_info(self, store_id, order_id, **kwargs):  # noqa: E501
        """List order line items  # noqa: E501

        Get information about an order's line items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_order_line_items_with_http_info(store_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: OrderLines
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_order_line_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderLines',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order_line_item(self, store_id, order_id, line_id, **kwargs):  # noqa: E501
        """Get order line item  # noqa: E501

        Get information about a specific order line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_line_item(store_id, order_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param str line_id: The id for the line item of an order. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceOrderLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_line_item_with_http_info(store_id, order_id, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_line_item_with_http_info(store_id, order_id, line_id, **kwargs)  # noqa: E501
            return data

    def get_order_line_item_with_http_info(self, store_id, order_id, line_id, **kwargs):  # noqa: E501
        """Get order line item  # noqa: E501

        Get information about a specific order line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_line_item_with_http_info(store_id, order_id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param str line_id: The id for the line item of an order. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceOrderLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id', 'line_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceOrderLineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_store_products(self, store_id, **kwargs):  # noqa: E501
        """List product  # noqa: E501

        Get information about a store's products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_store_products(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: Products
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_store_products_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_store_products_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def get_all_store_products_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """List product  # noqa: E501

        Get information about a store's products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_store_products_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: Products
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_store_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Products',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store_product(self, store_id, product_id, **kwargs):  # noqa: E501
        """Get product info  # noqa: E501

        Get information about a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_product(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_store_product_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_store_product_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
            return data

    def get_store_product_with_http_info(self, store_id, product_id, **kwargs):  # noqa: E501
        """Get product info  # noqa: E501

        Get information about a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_product_with_http_info(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_images(self, store_id, product_id, **kwargs):  # noqa: E501
        """List product images  # noqa: E501

        Get information about a product's images.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_images(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: EcommerceProductImages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_images_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_images_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
            return data

    def get_product_images_with_http_info(self, store_id, product_id, **kwargs):  # noqa: E501
        """List product images  # noqa: E501

        Get information about a product's images.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_images_with_http_info(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: EcommerceProductImages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductImages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_image(self, store_id, product_id, image_id, **kwargs):  # noqa: E501
        """Get product image info  # noqa: E501

        Get information about a specific product image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_image(store_id, product_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str image_id: The id for the product image. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceProductImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_image_with_http_info(store_id, product_id, image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_image_with_http_info(store_id, product_id, image_id, **kwargs)  # noqa: E501
            return data

    def get_product_image_with_http_info(self, store_id, product_id, image_id, **kwargs):  # noqa: E501
        """Get product image info  # noqa: E501

        Get information about a specific product image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_image_with_http_info(store_id, product_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str image_id: The id for the product image. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceProductImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'image_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_variants(self, store_id, product_id, **kwargs):  # noqa: E501
        """List product variants  # noqa: E501

        Get information about a product's variants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_variants(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: EcommerceProductVariants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_variants_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_variants_with_http_info(store_id, product_id, **kwargs)  # noqa: E501
            return data

    def get_product_variants_with_http_info(self, store_id, product_id, **kwargs):  # noqa: E501
        """List product variants  # noqa: E501

        Get information about a product's variants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_variants_with_http_info(store_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: EcommerceProductVariants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_variants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductVariants',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product_variant(self, store_id, product_id, variant_id, **kwargs):  # noqa: E501
        """Get product variant info  # noqa: E501

        Get information about a specific product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_variant(store_id, product_id, variant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_variant_with_http_info(store_id, product_id, variant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_variant_with_http_info(store_id, product_id, variant_id, **kwargs)  # noqa: E501
            return data

    def get_product_variant_with_http_info(self, store_id, product_id, variant_id, **kwargs):  # noqa: E501
        """Get product variant info  # noqa: E501

        Get information about a specific product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_variant_with_http_info(store_id, product_id, variant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'variant_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'variant_id' is set
        if ('variant_id' not in params or
                params['variant_id'] is None):
            raise ValueError("Missing the required parameter `variant_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501
        if 'variant_id' in params:
            path_params['variant_id'] = params['variant_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductVariant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_promo_codes(self, promo_rule_id, store_id, **kwargs):  # noqa: E501
        """List promo codes  # noqa: E501

        Get information about a store's promo codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_promo_codes(promo_rule_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: PromoCodes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_promo_codes_with_http_info(promo_rule_id, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_promo_codes_with_http_info(promo_rule_id, store_id, **kwargs)  # noqa: E501
            return data

    def get_promo_codes_with_http_info(self, promo_rule_id, store_id, **kwargs):  # noqa: E501
        """List promo codes  # noqa: E501

        Get information about a store's promo codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_promo_codes_with_http_info(promo_rule_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: PromoCodes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promo_rule_id', 'store_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_promo_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PromoCodes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_promo_code(self, store_id, promo_rule_id, promo_code_id, **kwargs):  # noqa: E501
        """Get promo code  # noqa: E501

        Get information about a specific promo code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_promo_code(store_id, promo_rule_id, promo_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str promo_code_id: The id for the promo code of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommercePromoCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, **kwargs)  # noqa: E501
            return data

    def get_promo_code_with_http_info(self, store_id, promo_rule_id, promo_code_id, **kwargs):  # noqa: E501
        """Get promo code  # noqa: E501

        Get information about a specific promo code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str promo_code_id: The id for the promo code of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommercePromoCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'promo_rule_id', 'promo_code_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_promo_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_code_id' is set
        if ('promo_code_id' not in params or
                params['promo_code_id'] is None):
            raise ValueError("Missing the required parameter `promo_code_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501
        if 'promo_code_id' in params:
            path_params['promo_code_id'] = params['promo_code_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommercePromoCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_promo_rules(self, store_id, **kwargs):  # noqa: E501
        """List promo rules  # noqa: E501

        Get information about a store's promo rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_promo_rules(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: PromoRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_promo_rules_with_http_info(store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_promo_rules_with_http_info(store_id, **kwargs)  # noqa: E501
            return data

    def list_promo_rules_with_http_info(self, store_id, **kwargs):  # noqa: E501
        """List promo rules  # noqa: E501

        Get information about a store's promo rules.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_promo_rules_with_http_info(store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: PromoRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_promo_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PromoRules',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_promo_rule(self, store_id, promo_rule_id, **kwargs):  # noqa: E501
        """Get promo rule  # noqa: E501

        Get information about a specific promo rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_promo_rule(store_id, promo_rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommercePromoRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_promo_rule_with_http_info(store_id, promo_rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_promo_rule_with_http_info(store_id, promo_rule_id, **kwargs)  # noqa: E501
            return data

    def get_promo_rule_with_http_info(self, store_id, promo_rule_id, **kwargs):  # noqa: E501
        """Get promo rule  # noqa: E501

        Get information about a specific promo rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_promo_rule_with_http_info(store_id, promo_rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EcommercePromoRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'promo_rule_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_promo_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommercePromoRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_store(self, store_id, body, **kwargs):  # noqa: E501
        """Update store  # noqa: E501

        Update a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceStore2 body:  (required)
        :return: EcommerceStore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_store_with_http_info(store_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_store_with_http_info(store_id, body, **kwargs)  # noqa: E501
            return data

    def update_store_with_http_info(self, store_id, body, **kwargs):  # noqa: E501
        """Update store  # noqa: E501

        Update a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_with_http_info(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceStore2 body:  (required)
        :return: EcommerceStore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceStore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_store_cart(self, store_id, cart_id, body, **kwargs):  # noqa: E501
        """Update cart  # noqa: E501

        Update a specific cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_cart(store_id, cart_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param EcommerceCart2 body:  (required)
        :return: EcommerceCart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_store_cart_with_http_info(store_id, cart_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_store_cart_with_http_info(store_id, cart_id, body, **kwargs)  # noqa: E501
            return data

    def update_store_cart_with_http_info(self, store_id, cart_id, body, **kwargs):  # noqa: E501
        """Update cart  # noqa: E501

        Update a specific cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_cart_with_http_info(store_id, cart_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param EcommerceCart2 body:  (required)
        :return: EcommerceCart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_store_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cart_line_item(self, store_id, cart_id, line_id, body, **kwargs):  # noqa: E501
        """Update cart line item  # noqa: E501

        Update a specific cart line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cart_line_item(store_id, cart_id, line_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param str line_id: The id for the line item of a cart. (required)
        :param EcommerceCartLineItem4 body:  (required)
        :return: EcommerceCartLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cart_line_item_with_http_info(store_id, cart_id, line_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cart_line_item_with_http_info(store_id, cart_id, line_id, body, **kwargs)  # noqa: E501
            return data

    def update_cart_line_item_with_http_info(self, store_id, cart_id, line_id, body, **kwargs):  # noqa: E501
        """Update cart line item  # noqa: E501

        Update a specific cart line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cart_line_item_with_http_info(store_id, cart_id, line_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param str line_id: The id for the line item of a cart. (required)
        :param EcommerceCartLineItem4 body:  (required)
        :return: EcommerceCartLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id', 'line_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cart_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCartLineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_store_customer(self, store_id, customer_id, body, **kwargs):  # noqa: E501
        """Update customer  # noqa: E501

        Update a customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_customer(store_id, customer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :param EcommerceCustomer5 body:  (required)
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_store_customer_with_http_info(store_id, customer_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_store_customer_with_http_info(store_id, customer_id, body, **kwargs)  # noqa: E501
            return data

    def update_store_customer_with_http_info(self, store_id, customer_id, body, **kwargs):  # noqa: E501
        """Update customer  # noqa: E501

        Update a customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_customer_with_http_info(store_id, customer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :param EcommerceCustomer5 body:  (required)
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'customer_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_store_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCustomer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_order(self, store_id, order_id, body, **kwargs):  # noqa: E501
        """Update order  # noqa: E501

        Update a specific order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_order(store_id, order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param EcommerceOrder2 body:  (required)
        :return: EcommerceOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_order_with_http_info(store_id, order_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_order_with_http_info(store_id, order_id, body, **kwargs)  # noqa: E501
            return data

    def update_order_with_http_info(self, store_id, order_id, body, **kwargs):  # noqa: E501
        """Update order  # noqa: E501

        Update a specific order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_order_with_http_info(store_id, order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param EcommerceOrder2 body:  (required)
        :return: EcommerceOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_order_line_item(self, store_id, order_id, line_id, body, **kwargs):  # noqa: E501
        """Update order line item  # noqa: E501

        Update a specific order line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_order_line_item(store_id, order_id, line_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param str line_id: The id for the line item of an order. (required)
        :param EcommerceOrderLineItem4 body:  (required)
        :return: EcommerceOrderLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_order_line_item_with_http_info(store_id, order_id, line_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_order_line_item_with_http_info(store_id, order_id, line_id, body, **kwargs)  # noqa: E501
            return data

    def update_order_line_item_with_http_info(self, store_id, order_id, line_id, body, **kwargs):  # noqa: E501
        """Update order line item  # noqa: E501

        Update a specific order line item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_order_line_item_with_http_info(store_id, order_id, line_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param str line_id: The id for the line item of an order. (required)
        :param EcommerceOrderLineItem4 body:  (required)
        :return: EcommerceOrderLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id', 'line_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_order_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceOrderLineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_store_product(self, store_id, product_id, body, **kwargs):  # noqa: E501
        """Update product  # noqa: E501

        Update a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_product(store_id, product_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param EcommerceProduct2 body:  (required)
        :return: EcommerceProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_store_product_with_http_info(store_id, product_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_store_product_with_http_info(store_id, product_id, body, **kwargs)  # noqa: E501
            return data

    def update_store_product_with_http_info(self, store_id, product_id, body, **kwargs):  # noqa: E501
        """Update product  # noqa: E501

        Update a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_store_product_with_http_info(store_id, product_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param EcommerceProduct2 body:  (required)
        :return: EcommerceProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_store_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product_image(self, store_id, product_id, image_id, body, **kwargs):  # noqa: E501
        """Update product image  # noqa: E501

        Update a product image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_image(store_id, product_id, image_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str image_id: The id for the product image. (required)
        :param EcommerceProductImage4 body:  (required)
        :return: EcommerceProductImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_image_with_http_info(store_id, product_id, image_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_image_with_http_info(store_id, product_id, image_id, body, **kwargs)  # noqa: E501
            return data

    def update_product_image_with_http_info(self, store_id, product_id, image_id, body, **kwargs):  # noqa: E501
        """Update product image  # noqa: E501

        Update a product image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_image_with_http_info(store_id, product_id, image_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str image_id: The id for the product image. (required)
        :param EcommerceProductImage4 body:  (required)
        :return: EcommerceProductImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'image_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product_variant(self, store_id, product_id, variant_id, body, **kwargs):  # noqa: E501
        """Update product variant  # noqa: E501

        Update a product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_variant(store_id, product_id, variant_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :param EcommerceProductVariant5 body:  (required)
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_variant_with_http_info(store_id, product_id, variant_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_variant_with_http_info(store_id, product_id, variant_id, body, **kwargs)  # noqa: E501
            return data

    def update_product_variant_with_http_info(self, store_id, product_id, variant_id, body, **kwargs):  # noqa: E501
        """Update product variant  # noqa: E501

        Update a product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_variant_with_http_info(store_id, product_id, variant_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :param EcommerceProductVariant5 body:  (required)
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'variant_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'variant_id' is set
        if ('variant_id' not in params or
                params['variant_id'] is None):
            raise ValueError("Missing the required parameter `variant_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501
        if 'variant_id' in params:
            path_params['variant_id'] = params['variant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductVariant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_promo_code(self, store_id, promo_rule_id, promo_code_id, body, **kwargs):  # noqa: E501
        """Update promo code  # noqa: E501

        Update a promo code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_promo_code(store_id, promo_rule_id, promo_code_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str promo_code_id: The id for the promo code of a store. (required)
        :param EcommercePromoCode2 body:  (required)
        :return: EcommercePromoCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, body, **kwargs)  # noqa: E501
            return data

    def update_promo_code_with_http_info(self, store_id, promo_rule_id, promo_code_id, body, **kwargs):  # noqa: E501
        """Update promo code  # noqa: E501

        Update a promo code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_promo_code_with_http_info(store_id, promo_rule_id, promo_code_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param str promo_code_id: The id for the promo code of a store. (required)
        :param EcommercePromoCode2 body:  (required)
        :return: EcommercePromoCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'promo_rule_id', 'promo_code_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_promo_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_code_id' is set
        if ('promo_code_id' not in params or
                params['promo_code_id'] is None):
            raise ValueError("Missing the required parameter `promo_code_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501
        if 'promo_code_id' in params:
            path_params['promo_code_id'] = params['promo_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommercePromoCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_promo_rule(self, store_id, promo_rule_id, body, **kwargs):  # noqa: E501
        """Update promo rule  # noqa: E501

        Update a promo rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_promo_rule(store_id, promo_rule_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param EcommercePromoRule2 body:  (required)
        :return: EcommercePromoRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_promo_rule_with_http_info(store_id, promo_rule_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_promo_rule_with_http_info(store_id, promo_rule_id, body, **kwargs)  # noqa: E501
            return data

    def update_promo_rule_with_http_info(self, store_id, promo_rule_id, body, **kwargs):  # noqa: E501
        """Update promo rule  # noqa: E501

        Update a promo rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_promo_rule_with_http_info(store_id, promo_rule_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param EcommercePromoRule2 body:  (required)
        :return: EcommercePromoRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'promo_rule_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_promo_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommercePromoRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_store(self, body, **kwargs):  # noqa: E501
        """Add store  # noqa: E501

        Add a new store to your Mailchimp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EcommerceStore1 body:  (required)
        :return: EcommerceStore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_store_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_store_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_store_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add store  # noqa: E501

        Add a new store to your Mailchimp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EcommerceStore1 body:  (required)
        :return: EcommerceStore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceStore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_store_cart(self, store_id, body, **kwargs):  # noqa: E501
        """Add cart  # noqa: E501

        Add a new cart to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_cart(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceCart1 body:  (required)
        :return: EcommerceCart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_store_cart_with_http_info(store_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_store_cart_with_http_info(store_id, body, **kwargs)  # noqa: E501
            return data

    def add_store_cart_with_http_info(self, store_id, body, **kwargs):  # noqa: E501
        """Add cart  # noqa: E501

        Add a new cart to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_cart_with_http_info(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceCart1 body:  (required)
        :return: EcommerceCart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_store_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCart',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_cart_line_item(self, store_id, cart_id, body, **kwargs):  # noqa: E501
        """Add cart line item  # noqa: E501

        Add a new line item to an existing cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cart_line_item(store_id, cart_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param EcommerceCartLineItem3 body:  (required)
        :return: EcommerceCartLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cart_line_item_with_http_info(store_id, cart_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_cart_line_item_with_http_info(store_id, cart_id, body, **kwargs)  # noqa: E501
            return data

    def add_cart_line_item_with_http_info(self, store_id, cart_id, body, **kwargs):  # noqa: E501
        """Add cart line item  # noqa: E501

        Add a new line item to an existing cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cart_line_item_with_http_info(store_id, cart_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str cart_id: The id for the cart. (required)
        :param EcommerceCartLineItem3 body:  (required)
        :return: EcommerceCartLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'cart_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cart_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCartLineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_store_customer(self, store_id, body, **kwargs):  # noqa: E501
        """Add customer  # noqa: E501

        Add a new customer to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_customer(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceCustomer3 body:  (required)
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_store_customer_with_http_info(store_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_store_customer_with_http_info(store_id, body, **kwargs)  # noqa: E501
            return data

    def add_store_customer_with_http_info(self, store_id, body, **kwargs):  # noqa: E501
        """Add customer  # noqa: E501

        Add a new customer to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_customer_with_http_info(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceCustomer3 body:  (required)
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_store_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/customers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCustomer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_store_order(self, store_id, body, **kwargs):  # noqa: E501
        """Add order  # noqa: E501

        Add a new order to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_order(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceOrder1 body:  (required)
        :return: EcommerceOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_store_order_with_http_info(store_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_store_order_with_http_info(store_id, body, **kwargs)  # noqa: E501
            return data

    def add_store_order_with_http_info(self, store_id, body, **kwargs):  # noqa: E501
        """Add order  # noqa: E501

        Add a new order to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_order_with_http_info(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceOrder1 body:  (required)
        :return: EcommerceOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_store_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_order_line_item(self, store_id, order_id, body, **kwargs):  # noqa: E501
        """Add order line item  # noqa: E501

        Add a new line item to an existing order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_order_line_item(store_id, order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param EcommerceOrderLineItem3 body:  (required)
        :return: EcommerceOrderLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_order_line_item_with_http_info(store_id, order_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_order_line_item_with_http_info(store_id, order_id, body, **kwargs)  # noqa: E501
            return data

    def add_order_line_item_with_http_info(self, store_id, order_id, body, **kwargs):  # noqa: E501
        """Add order line item  # noqa: E501

        Add a new line item to an existing order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_order_line_item_with_http_info(store_id, order_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str order_id: The id for the order in a store. (required)
        :param EcommerceOrderLineItem3 body:  (required)
        :return: EcommerceOrderLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_order_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceOrderLineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_store_product(self, store_id, body, **kwargs):  # noqa: E501
        """Add product  # noqa: E501

        Add a new product to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_product(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceProduct1 body:  (required)
        :return: EcommerceProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_store_product_with_http_info(store_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_store_product_with_http_info(store_id, body, **kwargs)  # noqa: E501
            return data

    def add_store_product_with_http_info(self, store_id, body, **kwargs):  # noqa: E501
        """Add product  # noqa: E501

        Add a new product to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_store_product_with_http_info(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommerceProduct1 body:  (required)
        :return: EcommerceProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_store_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProduct',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_product_image(self, store_id, product_id, body, **kwargs):  # noqa: E501
        """Add product image  # noqa: E501

        Add a new image to the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product_image(store_id, product_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param EcommerceProductImage3 body:  (required)
        :return: EcommerceProductImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_product_image_with_http_info(store_id, product_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_product_image_with_http_info(store_id, product_id, body, **kwargs)  # noqa: E501
            return data

    def add_product_image_with_http_info(self, store_id, product_id, body, **kwargs):  # noqa: E501
        """Add product image  # noqa: E501

        Add a new image to the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product_image_with_http_info(store_id, product_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param EcommerceProductImage3 body:  (required)
        :return: EcommerceProductImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_product_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_product_variants(self, store_id, product_id, body, **kwargs):  # noqa: E501
        """Add product variant  # noqa: E501

        Add a new variant to the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product_variants(store_id, product_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param EcommerceProductVariant3 body:  (required)
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_product_variants_with_http_info(store_id, product_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_product_variants_with_http_info(store_id, product_id, body, **kwargs)  # noqa: E501
            return data

    def add_product_variants_with_http_info(self, store_id, product_id, body, **kwargs):  # noqa: E501
        """Add product variant  # noqa: E501

        Add a new variant to the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product_variants_with_http_info(store_id, product_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param EcommerceProductVariant3 body:  (required)
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_product_variants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductVariant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_promo_code(self, store_id, promo_rule_id, body, **kwargs):  # noqa: E501
        """Add promo code  # noqa: E501

        Add a new promo code to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_promo_code(store_id, promo_rule_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param EcommercePromoCode1 body:  (required)
        :return: EcommercePromoCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_promo_code_with_http_info(store_id, promo_rule_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_promo_code_with_http_info(store_id, promo_rule_id, body, **kwargs)  # noqa: E501
            return data

    def add_promo_code_with_http_info(self, store_id, promo_rule_id, body, **kwargs):  # noqa: E501
        """Add promo code  # noqa: E501

        Add a new promo code to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_promo_code_with_http_info(store_id, promo_rule_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str promo_rule_id: The id for the promo rule of a store. (required)
        :param EcommercePromoCode1 body:  (required)
        :return: EcommercePromoCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'promo_rule_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_promo_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'promo_rule_id' is set
        if ('promo_rule_id' not in params or
                params['promo_rule_id'] is None):
            raise ValueError("Missing the required parameter `promo_rule_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'promo_rule_id' in params:
            path_params['promo_rule_id'] = params['promo_rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommercePromoCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_promo_rules(self, store_id, body, **kwargs):  # noqa: E501
        """Add promo rule  # noqa: E501

        Add a new promo rule to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_promo_rules(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommercePromoRule1 body:  (required)
        :return: EcommercePromoRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_promo_rules_with_http_info(store_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_promo_rules_with_http_info(store_id, body, **kwargs)  # noqa: E501
            return data

    def add_promo_rules_with_http_info(self, store_id, body, **kwargs):  # noqa: E501
        """Add promo rule  # noqa: E501

        Add a new promo rule to a store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_promo_rules_with_http_info(store_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param EcommercePromoRule1 body:  (required)
        :return: EcommercePromoRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_promo_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/promo-rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommercePromoRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_store_customer(self, store_id, customer_id, body, **kwargs):  # noqa: E501
        """Add or update customer  # noqa: E501

        Add or update a customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_store_customer(store_id, customer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :param EcommerceCustomer4 body:  (required)
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_store_customer_with_http_info(store_id, customer_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_store_customer_with_http_info(store_id, customer_id, body, **kwargs)  # noqa: E501
            return data

    def set_store_customer_with_http_info(self, store_id, customer_id, body, **kwargs):  # noqa: E501
        """Add or update customer  # noqa: E501

        Add or update a customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_store_customer_with_http_info(store_id, customer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str customer_id: The id for the customer of a store. (required)
        :param EcommerceCustomer4 body:  (required)
        :return: EcommerceCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'customer_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_store_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceCustomer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_product_variant(self, store_id, product_id, variant_id, body, **kwargs):  # noqa: E501
        """Add or update product variant  # noqa: E501

        Add or update a product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product_variant(store_id, product_id, variant_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :param EcommerceProductVariant4 body:  (required)
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_product_variant_with_http_info(store_id, product_id, variant_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_product_variant_with_http_info(store_id, product_id, variant_id, body, **kwargs)  # noqa: E501
            return data

    def add_product_variant_with_http_info(self, store_id, product_id, variant_id, body, **kwargs):  # noqa: E501
        """Add or update product variant  # noqa: E501

        Add or update a product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product_variant_with_http_info(store_id, product_id, variant_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: The store id. (required)
        :param str product_id: The id for the product of a store. (required)
        :param str variant_id: The id for the product variant. (required)
        :param EcommerceProductVariant4 body:  (required)
        :return: EcommerceProductVariant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'product_id', 'variant_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_product_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling ``")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling ``")  # noqa: E501
        # verify the required parameter 'variant_id' is set
        if ('variant_id' not in params or
                params['variant_id'] is None):
            raise ValueError("Missing the required parameter `variant_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'store_id' in params:
            path_params['store_id'] = params['store_id']  # noqa: E501
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']  # noqa: E501
        if 'variant_id' in params:
            path_params['variant_id'] = params['variant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EcommerceProductVariant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
