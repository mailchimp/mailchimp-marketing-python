# coding: utf-8

"""
    Mailchimp Marketing API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.20
    Contact: apihelp@mailchimp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mailchimp_marketing.api_client import ApiClient


class ListsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client):
        self.api_client = api_client

    def delete_list(self, list_id, **kwargs):  # noqa: E501
        """Delete list  # noqa: E501

        Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def delete_list_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """Delete list  # noqa: E501

        Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_interest_category(self, list_id, interest_category_id, **kwargs):  # noqa: E501
        """Delete interest category  # noqa: E501

        Delete a specific interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_interest_category(list_id, interest_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_interest_category_with_http_info(list_id, interest_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_interest_category_with_http_info(list_id, interest_category_id, **kwargs)  # noqa: E501
            return data

    def delete_interest_category_with_http_info(self, list_id, interest_category_id, **kwargs):  # noqa: E501
        """Delete interest category  # noqa: E501

        Delete a specific interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_interest_category_with_http_info(list_id, interest_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_interest_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_interest_category_interest(self, list_id, interest_category_id, interest_id, **kwargs):  # noqa: E501
        """Delete interest in category  # noqa: E501

        Delete interests or group names in a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_interest_category_interest(list_id, interest_category_id, interest_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param str interest_id: The specific interest or 'group name'. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, **kwargs)  # noqa: E501
            return data

    def delete_interest_category_interest_with_http_info(self, list_id, interest_category_id, interest_id, **kwargs):  # noqa: E501
        """Delete interest in category  # noqa: E501

        Delete interests or group names in a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param str interest_id: The specific interest or 'group name'. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id', 'interest_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_interest_category_interest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_id' is set
        if ('interest_id' not in params or
                params['interest_id'] is None):
            raise ValueError("Missing the required parameter `interest_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501
        if 'interest_id' in params:
            path_params['interest_id'] = params['interest_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_member(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Archive list member  # noqa: E501

        Archive a list member. To permanently delete, use the delete-permanent action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_member(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_member_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_member_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def delete_list_member_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Archive list member  # noqa: E501

        Archive a list member. To permanently delete, use the delete-permanent action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_member_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_member_note(self, list_id, subscriber_hash, note_id, **kwargs):  # noqa: E501
        """Delete note  # noqa: E501

        Delete a specific note for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_member_note(list_id, subscriber_hash, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str note_id: The id for the note. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_member_note_with_http_info(list_id, subscriber_hash, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_member_note_with_http_info(list_id, subscriber_hash, note_id, **kwargs)  # noqa: E501
            return data

    def delete_list_member_note_with_http_info(self, list_id, subscriber_hash, note_id, **kwargs):  # noqa: E501
        """Delete note  # noqa: E501

        Delete a specific note for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_member_note_with_http_info(list_id, subscriber_hash, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str note_id: The id for the note. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_member_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_merge_field(self, list_id, merge_id, **kwargs):  # noqa: E501
        """Delete merge field  # noqa: E501

        Delete a specific merge field in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_merge_field(list_id, merge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str merge_id: The id for the merge field. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_merge_field_with_http_info(list_id, merge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_merge_field_with_http_info(list_id, merge_id, **kwargs)  # noqa: E501
            return data

    def delete_list_merge_field_with_http_info(self, list_id, merge_id, **kwargs):  # noqa: E501
        """Delete merge field  # noqa: E501

        Delete a specific merge field in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_merge_field_with_http_info(list_id, merge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str merge_id: The id for the merge field. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'merge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_merge_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'merge_id' is set
        if ('merge_id' not in params or
                params['merge_id'] is None):
            raise ValueError("Missing the required parameter `merge_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'merge_id' in params:
            path_params['merge_id'] = params['merge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/merge-fields/{merge_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_segment(self, list_id, segment_id, **kwargs):  # noqa: E501
        """Delete segment  # noqa: E501

        Delete a specific segment in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_segment(list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_segment_with_http_info(list_id, segment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_segment_with_http_info(list_id, segment_id, **kwargs)  # noqa: E501
            return data

    def delete_segment_with_http_info(self, list_id, segment_id, **kwargs):  # noqa: E501
        """Delete segment  # noqa: E501

        Delete a specific segment in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_segment_with_http_info(list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'segment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params or
                params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments/{segment_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_segment_member(self, list_id, segment_id, subscriber_hash, **kwargs):  # noqa: E501
        """Remove list member from segment  # noqa: E501

        Remove a member from the specified static segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_segment_member(list_id, segment_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_segment_member_with_http_info(list_id, segment_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_segment_member_with_http_info(list_id, segment_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def remove_segment_member_with_http_info(self, list_id, segment_id, subscriber_hash, **kwargs):  # noqa: E501
        """Remove list member from segment  # noqa: E501

        Remove a member from the specified static segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_segment_member_with_http_info(list_id, segment_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'segment_id', 'subscriber_hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_segment_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params or
                params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_webhook(self, list_id, webhook_id, **kwargs):  # noqa: E501
        """Delete webhook  # noqa: E501

        Delete a specific webhook in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_webhook(list_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str webhook_id: The webhook's id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_webhook_with_http_info(list_id, webhook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_webhook_with_http_info(list_id, webhook_id, **kwargs)  # noqa: E501
            return data

    def delete_list_webhook_with_http_info(self, list_id, webhook_id, **kwargs):  # noqa: E501
        """Delete webhook  # noqa: E501

        Delete a specific webhook in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_webhook_with_http_info(list_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str webhook_id: The webhook's id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'webhook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhook_id'] = params['webhook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/webhooks/{webhook_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_member_tags(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List member tags  # noqa: E501

        Get the tags on a list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_tags(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: CollectionOfTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_member_tags_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_member_tags_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_list_member_tags_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List member tags  # noqa: E501

        Get the tags on a list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_tags_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: CollectionOfTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_member_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfTags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_lists(self, **kwargs):  # noqa: E501
        """Get lists info  # noqa: E501

        Get information about all lists in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_lists(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str before_date_created: Restrict response to lists created before the set date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str since_date_created: Restrict results to lists created after the set date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_campaign_last_sent: Restrict results to lists created before the last campaign send date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str since_campaign_last_sent: Restrict results to lists created after the last campaign send date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str email: Restrict results to lists that include a specific subscriber's email address.
        :param str sort_field: Returns files sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :param bool has_ecommerce_store: Restrict results to lists that contain an active, connected, undeleted ecommerce store.
        :return: SubscriberLists
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_lists_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_lists_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_lists_with_http_info(self, **kwargs):  # noqa: E501
        """Get lists info  # noqa: E501

        Get information about all lists in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_lists_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str before_date_created: Restrict response to lists created before the set date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str since_date_created: Restrict results to lists created after the set date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_campaign_last_sent: Restrict results to lists created before the last campaign send date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str since_campaign_last_sent: Restrict results to lists created after the last campaign send date. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str email: Restrict results to lists that include a specific subscriber's email address.
        :param str sort_field: Returns files sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :param bool has_ecommerce_store: Restrict results to lists that contain an active, connected, undeleted ecommerce store.
        :return: SubscriberLists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'exclude_fields', 'count', 'offset', 'before_date_created', 'since_date_created', 'before_campaign_last_sent', 'since_campaign_last_sent', 'email', 'sort_field', 'sort_dir', 'has_ecommerce_store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_lists" % key
                )
            params[key] = val
        del params['kwargs']

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'before_date_created' in params:
            query_params.append(('before_date_created', params['before_date_created']))  # noqa: E501
        if 'since_date_created' in params:
            query_params.append(('since_date_created', params['since_date_created']))  # noqa: E501
        if 'before_campaign_last_sent' in params:
            query_params.append(('before_campaign_last_sent', params['before_campaign_last_sent']))  # noqa: E501
        if 'since_campaign_last_sent' in params:
            query_params.append(('since_campaign_last_sent', params['since_campaign_last_sent']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sort_field', params['sort_field']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'has_ecommerce_store' in params:
            query_params.append(('has_ecommerce_store', params['has_ecommerce_store']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberLists',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list(self, list_id, **kwargs):  # noqa: E501
        """Get list info  # noqa: E501

        Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: SubscriberList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """Get list info  # noqa: E501

        Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: SubscriberList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_abuse_reports(self, list_id, **kwargs):  # noqa: E501
        """List abuse reports  # noqa: E501

        Get all abuse reports for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_abuse_reports(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: AbuseComplaints
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_abuse_reports_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_abuse_reports_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_abuse_reports_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List abuse reports  # noqa: E501

        Get all abuse reports for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_abuse_reports_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: AbuseComplaints
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_abuse_reports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/abuse-reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbuseComplaints',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_abuse_report_details(self, list_id, report_id, **kwargs):  # noqa: E501
        """Get abuse report  # noqa: E501

        Get details about a specific abuse report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_abuse_report_details(list_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str report_id: The id for the abuse report. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: AbuseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_abuse_report_details_with_http_info(list_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_abuse_report_details_with_http_info(list_id, report_id, **kwargs)  # noqa: E501
            return data

    def get_list_abuse_report_details_with_http_info(self, list_id, report_id, **kwargs):  # noqa: E501
        """Get abuse report  # noqa: E501

        Get details about a specific abuse report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_abuse_report_details_with_http_info(list_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str report_id: The id for the abuse report. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: AbuseComplaint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'report_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_abuse_report_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params or
                params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'report_id' in params:
            path_params['report_id'] = params['report_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/abuse-reports/{report_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbuseComplaint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_recent_activity(self, list_id, **kwargs):  # noqa: E501
        """List recent activity  # noqa: E501

        Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_recent_activity(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: ListActivity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_recent_activity_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_recent_activity_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_recent_activity_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List recent activity  # noqa: E501

        Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_recent_activity_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: ListActivity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_recent_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/activity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListActivity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_clients(self, list_id, **kwargs):  # noqa: E501
        """List top email clients  # noqa: E501

        Get a list of the top email clients based on user-agent strings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_clients(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EmailClients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_clients_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_clients_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_clients_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List top email clients  # noqa: E501

        Get a list of the top email clients based on user-agent strings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_clients_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: EmailClients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_clients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailClients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_growth_history(self, list_id, **kwargs):  # noqa: E501
        """List growth history data  # noqa: E501

        Get a month-by-month summary of a specific list's growth activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_growth_history(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str sort_field: Returns files sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :return: GrowthHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_growth_history_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_growth_history_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_growth_history_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List growth history data  # noqa: E501

        Get a month-by-month summary of a specific list's growth activity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_growth_history_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str sort_field: Returns files sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :return: GrowthHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields', 'count', 'offset', 'sort_field', 'sort_dir']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_growth_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sort_field', params['sort_field']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/growth-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrowthHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_growth_history_by_month(self, list_id, month, **kwargs):  # noqa: E501
        """Get growth history by month  # noqa: E501

        Get a summary of a specific list's growth activity for a specific month and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_growth_history_by_month(list_id, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str month: A specific month of list growth history. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: GrowthHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_growth_history_by_month_with_http_info(list_id, month, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_growth_history_by_month_with_http_info(list_id, month, **kwargs)  # noqa: E501
            return data

    def get_list_growth_history_by_month_with_http_info(self, list_id, month, **kwargs):  # noqa: E501
        """Get growth history by month  # noqa: E501

        Get a summary of a specific list's growth activity for a specific month and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_growth_history_by_month_with_http_info(list_id, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str month: A specific month of list growth history. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: GrowthHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'month', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_growth_history_by_month" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'month' is set
        if ('month' not in params or
                params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'month' in params:
            path_params['month'] = params['month']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/growth-history/{month}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrowthHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_interest_categories(self, list_id, **kwargs):  # noqa: E501
        """List interest categories  # noqa: E501

        Get information about a list's interest categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_interest_categories(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str type: Restrict results a type of interest group
        :return: InterestGroupings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_interest_categories_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_interest_categories_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_interest_categories_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List interest categories  # noqa: E501

        Get information about a list's interest categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_interest_categories_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str type: Restrict results a type of interest group
        :return: InterestGroupings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields', 'count', 'offset', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_interest_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterestGroupings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interest_category(self, list_id, interest_category_id, **kwargs):  # noqa: E501
        """Get interest category info  # noqa: E501

        Get information about a specific interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interest_category(list_id, interest_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: InterestCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_interest_category_with_http_info(list_id, interest_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interest_category_with_http_info(list_id, interest_category_id, **kwargs)  # noqa: E501
            return data

    def get_interest_category_with_http_info(self, list_id, interest_category_id, **kwargs):  # noqa: E501
        """Get interest category info  # noqa: E501

        Get information about a specific interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interest_category_with_http_info(list_id, interest_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: InterestCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interest_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterestCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_interest_category_interests(self, list_id, interest_category_id, **kwargs):  # noqa: E501
        """List interests in category  # noqa: E501

        Get a list of this category's interests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_interest_category_interests(list_id, interest_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: Interests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_interest_category_interests_with_http_info(list_id, interest_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_interest_category_interests_with_http_info(list_id, interest_category_id, **kwargs)  # noqa: E501
            return data

    def list_interest_category_interests_with_http_info(self, list_id, interest_category_id, **kwargs):  # noqa: E501
        """List interests in category  # noqa: E501

        Get a list of this category's interests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_interest_category_interests_with_http_info(list_id, interest_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: Interests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_interest_category_interests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Interests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_interest_category_interest(self, list_id, interest_category_id, interest_id, **kwargs):  # noqa: E501
        """Get interest in category  # noqa: E501

        Get interests or 'group names' for a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interest_category_interest(list_id, interest_category_id, interest_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param str interest_id: The specific interest or 'group name'. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: Interest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, **kwargs)  # noqa: E501
            return data

    def get_interest_category_interest_with_http_info(self, list_id, interest_category_id, interest_id, **kwargs):  # noqa: E501
        """Get interest in category  # noqa: E501

        Get interests or 'group names' for a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param str interest_id: The specific interest or 'group name'. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: Interest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id', 'interest_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_interest_category_interest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_id' is set
        if ('interest_id' not in params or
                params['interest_id'] is None):
            raise ValueError("Missing the required parameter `interest_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501
        if 'interest_id' in params:
            path_params['interest_id'] = params['interest_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Interest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_locations(self, list_id, **kwargs):  # noqa: E501
        """List locations  # noqa: E501

        Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_locations(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: ListLocations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_locations_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_locations_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_locations_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List locations  # noqa: E501

        Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_locations_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: ListLocations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListLocations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_members_info(self, list_id, **kwargs):  # noqa: E501
        """List members info  # noqa: E501

        Get information about members in a specific Mailchimp list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_members_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str email_type: The email type.
        :param str status: The subscriber's status.
        :param str since_timestamp_opt: Restrict results to subscribers who opted-in after the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_timestamp_opt: Restrict results to subscribers who opted-in before the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str since_last_changed: Restrict results to subscribers whose information changed after the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_last_changed: Restrict results to subscribers whose information changed before the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str unique_email_id: A unique identifier for the email address across all Mailchimp lists. This parameter can be found in any links with [Ecommerce Tracking](https://mailchimp.com/help/sell-more-stuff-with-mailchimp/) enabled.
        :param bool vip_only: A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.
        :param str interest_category_id: The unique id for the interest category.
        :param str interest_ids: Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.
        :param str interest_match: Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \"any\" will match a member with any of the interest supplied, \"all\" will only match members with every interest supplied, and \"none\" will match members without any of the interest supplied.
        :param str sort_field: Returns files sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :param bool since_last_campaign: Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.
        :param str unsubscribed_since: Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_members_info_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_members_info_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_members_info_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List members info  # noqa: E501

        Get information about members in a specific Mailchimp list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_members_info_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str email_type: The email type.
        :param str status: The subscriber's status.
        :param str since_timestamp_opt: Restrict results to subscribers who opted-in after the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_timestamp_opt: Restrict results to subscribers who opted-in before the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str since_last_changed: Restrict results to subscribers whose information changed after the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_last_changed: Restrict results to subscribers whose information changed before the set timeframe. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str unique_email_id: A unique identifier for the email address across all Mailchimp lists. This parameter can be found in any links with [Ecommerce Tracking](https://mailchimp.com/help/sell-more-stuff-with-mailchimp/) enabled.
        :param bool vip_only: A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.
        :param str interest_category_id: The unique id for the interest category.
        :param str interest_ids: Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.
        :param str interest_match: Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \"any\" will match a member with any of the interest supplied, \"all\" will only match members with every interest supplied, and \"none\" will match members without any of the interest supplied.
        :param str sort_field: Returns files sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :param bool since_last_campaign: Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.
        :param str unsubscribed_since: Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields', 'count', 'offset', 'email_type', 'status', 'since_timestamp_opt', 'before_timestamp_opt', 'since_last_changed', 'before_last_changed', 'unique_email_id', 'vip_only', 'interest_category_id', 'interest_ids', 'interest_match', 'sort_field', 'sort_dir', 'since_last_campaign', 'unsubscribed_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_members_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'email_type' in params:
            query_params.append(('email_type', params['email_type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'since_timestamp_opt' in params:
            query_params.append(('since_timestamp_opt', params['since_timestamp_opt']))  # noqa: E501
        if 'before_timestamp_opt' in params:
            query_params.append(('before_timestamp_opt', params['before_timestamp_opt']))  # noqa: E501
        if 'since_last_changed' in params:
            query_params.append(('since_last_changed', params['since_last_changed']))  # noqa: E501
        if 'before_last_changed' in params:
            query_params.append(('before_last_changed', params['before_last_changed']))  # noqa: E501
        if 'unique_email_id' in params:
            query_params.append(('unique_email_id', params['unique_email_id']))  # noqa: E501
        if 'vip_only' in params:
            query_params.append(('vip_only', params['vip_only']))  # noqa: E501
        if 'interest_category_id' in params:
            query_params.append(('interest_category_id', params['interest_category_id']))  # noqa: E501
        if 'interest_ids' in params:
            query_params.append(('interest_ids', params['interest_ids']))  # noqa: E501
        if 'interest_match' in params:
            query_params.append(('interest_match', params['interest_match']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sort_field', params['sort_field']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'since_last_campaign' in params:
            query_params.append(('since_last_campaign', params['since_last_campaign']))  # noqa: E501
        if 'unsubscribed_since' in params:
            query_params.append(('unsubscribed_since', params['unsubscribed_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMembers2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_member(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Get member info  # noqa: E501

        Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_member_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_member_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_list_member_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Get member info  # noqa: E501

        Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMembers2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_member_activity(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """View recent activity 50  # noqa: E501

        Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_activity(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param list[str] action: A comma seperated list of actions to return.
        :return: MemberActivityEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_member_activity_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_member_activity_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_list_member_activity_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """View recent activity 50  # noqa: E501

        Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_activity_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param list[str] action: A comma seperated list of actions to return.
        :return: MemberActivityEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'fields', 'exclude_fields', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_member_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
            collection_formats['action'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/activity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberActivityEvents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_member_activity_feed(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """View recent activity 10  # noqa: E501

        Get the last 10 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_activity_feed(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param list[str] activity_filters: A comma-separated list of activity filters that correspond to a set of activity types, e.g \"?activity_filters=open,bounce,click\".
        :return: MemberActivityEvents1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_member_activity_feed_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_member_activity_feed_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_list_member_activity_feed_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """View recent activity 10  # noqa: E501

        Get the last 10 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_activity_feed_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param list[str] activity_filters: A comma-separated list of activity filters that correspond to a set of activity types, e.g \"?activity_filters=open,bounce,click\".
        :return: MemberActivityEvents1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'fields', 'exclude_fields', 'count', 'offset', 'activity_filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_member_activity_feed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'activity_filters' in params:
            query_params.append(('activity_filters', params['activity_filters']))  # noqa: E501
            collection_formats['activity_filters'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/activity-feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberActivityEvents1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_member_events(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List member events  # noqa: E501

        Get events for a contact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_events(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts email addresses. (required)
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: CollectionOfEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_member_events_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_member_events_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_list_member_events_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List member events  # noqa: E501

        Get events for a contact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_events_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts email addresses. (required)
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: CollectionOfEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'count', 'offset', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_member_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfEvents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getListMemberGoals(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List member goal events  # noqa: E501

        Get the last 50 Goal events for a member on a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getListMemberGoals(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: CollectionOfMemberActivityEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getListMemberGoals_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.getListMemberGoals_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def getListMemberGoals_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List member goal events  # noqa: E501

        Get the last 50 Goal events for a member on a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getListMemberGoals_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: CollectionOfMemberActivityEvents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getListMemberGoals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/goals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfMemberActivityEvents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_member_notes(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List recent member notes  # noqa: E501

        Get recent notes for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_notes(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str sort_field: Returns notes sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: CollectionOfNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_member_notes_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_member_notes_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def get_list_member_notes_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """List recent member notes  # noqa: E501

        Get recent notes for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_notes_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str sort_field: Returns notes sorted by the specified field.
        :param str sort_dir: Determines the order direction for sorted results.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :return: CollectionOfNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'sort_field', 'sort_dir', 'fields', 'exclude_fields', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_member_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'sort_field' in params:
            query_params.append(('sort_field', params['sort_field']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_member_note(self, list_id, subscriber_hash, note_id, **kwargs):  # noqa: E501
        """Get member note  # noqa: E501

        Get a specific note for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_note(list_id, subscriber_hash, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str note_id: The id for the note. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: MemberNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_member_note_with_http_info(list_id, subscriber_hash, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_member_note_with_http_info(list_id, subscriber_hash, note_id, **kwargs)  # noqa: E501
            return data

    def get_list_member_note_with_http_info(self, list_id, subscriber_hash, note_id, **kwargs):  # noqa: E501
        """Get member note  # noqa: E501

        Get a specific note for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_member_note_with_http_info(list_id, subscriber_hash, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str note_id: The id for the note. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :return: MemberNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'note_id', 'fields', 'exclude_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_member_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_merge_fields(self, list_id, **kwargs):  # noqa: E501
        """List merge fields  # noqa: E501

        Get a list of all merge fields (formerly merge vars) for a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_merge_fields(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str type: The merge field type.
        :param bool required: The boolean value if the merge field is required.
        :return: CollectionOfMergeFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_merge_fields_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_merge_fields_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_merge_fields_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List merge fields  # noqa: E501

        Get a list of all merge fields (formerly merge vars) for a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_merge_fields_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str type: The merge field type.
        :param bool required: The boolean value if the merge field is required.
        :return: CollectionOfMergeFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields', 'count', 'offset', 'type', 'required']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_merge_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'required' in params:
            query_params.append(('required', params['required']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/merge-fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfMergeFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_merge_field(self, list_id, merge_id, **kwargs):  # noqa: E501
        """Get merge field  # noqa: E501

        Get information about a specific merge field in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_merge_field(list_id, merge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str merge_id: The id for the merge field. (required)
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :return: MergeField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_merge_field_with_http_info(list_id, merge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_merge_field_with_http_info(list_id, merge_id, **kwargs)  # noqa: E501
            return data

    def get_list_merge_field_with_http_info(self, list_id, merge_id, **kwargs):  # noqa: E501
        """Get merge field  # noqa: E501

        Get information about a specific merge field in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_merge_field_with_http_info(list_id, merge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str merge_id: The id for the merge field. (required)
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :return: MergeField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'merge_id', 'exclude_fields', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_merge_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'merge_id' is set
        if ('merge_id' not in params or
                params['merge_id'] is None):
            raise ValueError("Missing the required parameter `merge_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'merge_id' in params:
            path_params['merge_id'] = params['merge_id']  # noqa: E501

        query_params = []
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/merge-fields/{merge_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MergeField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_segment(self, list_id, segment_id, **kwargs):  # noqa: E501
        """Get segment info  # noqa: E501

        Get information about a specific segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_segment(list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param bool include_cleaned: Include cleaned members in response
        :param bool include_transactional: Include transactional members in response
        :param bool include_unsubscribed: Include unsubscribed members in response
        :return: List6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_segment_with_http_info(list_id, segment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_segment_with_http_info(list_id, segment_id, **kwargs)  # noqa: E501
            return data

    def get_segment_with_http_info(self, list_id, segment_id, **kwargs):  # noqa: E501
        """Get segment info  # noqa: E501

        Get information about a specific segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_segment_with_http_info(list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param bool include_cleaned: Include cleaned members in response
        :param bool include_transactional: Include transactional members in response
        :param bool include_unsubscribed: Include unsubscribed members in response
        :return: List6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'segment_id', 'fields', 'exclude_fields', 'include_cleaned', 'include_transactional', 'include_unsubscribed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params or
                params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'include_cleaned' in params:
            query_params.append(('include_cleaned', params['include_cleaned']))  # noqa: E501
        if 'include_transactional' in params:
            query_params.append(('include_transactional', params['include_transactional']))  # noqa: E501
        if 'include_unsubscribed' in params:
            query_params.append(('include_unsubscribed', params['include_unsubscribed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments/{segment_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_segment_members_list(self, list_id, segment_id, **kwargs):  # noqa: E501
        """List members in segment  # noqa: E501

        Get information about members in a saved segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_segment_members_list(list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param bool include_cleaned: Include cleaned members in response
        :param bool include_transactional: Include transactional members in response
        :param bool include_unsubscribed: Include unsubscribed members in response
        :return: SegmentMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_segment_members_list_with_http_info(list_id, segment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_segment_members_list_with_http_info(list_id, segment_id, **kwargs)  # noqa: E501
            return data

    def get_segment_members_list_with_http_info(self, list_id, segment_id, **kwargs):  # noqa: E501
        """List members in segment  # noqa: E501

        Get information about members in a saved segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_segment_members_list_with_http_info(list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param bool include_cleaned: Include cleaned members in response
        :param bool include_transactional: Include transactional members in response
        :param bool include_unsubscribed: Include unsubscribed members in response
        :return: SegmentMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'segment_id', 'fields', 'exclude_fields', 'count', 'offset', 'include_cleaned', 'include_transactional', 'include_unsubscribed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_segment_members_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params or
                params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'include_cleaned' in params:
            query_params.append(('include_cleaned', params['include_cleaned']))  # noqa: E501
        if 'include_transactional' in params:
            query_params.append(('include_transactional', params['include_transactional']))  # noqa: E501
        if 'include_unsubscribed' in params:
            query_params.append(('include_unsubscribed', params['include_unsubscribed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments/{segment_id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SegmentMembers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_signup_forms(self, list_id, **kwargs):  # noqa: E501
        """List signup forms  # noqa: E501

        Get signup forms for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_signup_forms(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :return: ListSignupForms
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_signup_forms_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_signup_forms_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_signup_forms_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List signup forms  # noqa: E501

        Get signup forms for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_signup_forms_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :return: ListSignupForms
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_signup_forms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/signup-forms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListSignupForms',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_webhooks(self, list_id, **kwargs):  # noqa: E501
        """List webhooks  # noqa: E501

        Get information about all webhooks for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_webhooks(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_webhooks_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_webhooks_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def get_list_webhooks_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List webhooks  # noqa: E501

        Get information about all webhooks for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_webhooks_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_webhooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/webhooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWebhooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_webhook(self, list_id, webhook_id, **kwargs):  # noqa: E501
        """Get webhook info  # noqa: E501

        Get information about a specific webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_webhook(list_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str webhook_id: The webhook's id. (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_webhook_with_http_info(list_id, webhook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_webhook_with_http_info(list_id, webhook_id, **kwargs)  # noqa: E501
            return data

    def get_list_webhook_with_http_info(self, list_id, webhook_id, **kwargs):  # noqa: E501
        """Get webhook info  # noqa: E501

        Get information about a specific webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_webhook_with_http_info(list_id, webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str webhook_id: The webhook's id. (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'webhook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhook_id'] = params['webhook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/webhooks/{webhook_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWebhooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_list(self, list_id, body, **kwargs):  # noqa: E501
        """Update lists  # noqa: E501

        Update the settings for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param SubscriberList2 body: (required)
        :return: SubscriberList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_list_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_list_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def update_list_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Update lists  # noqa: E501

        Update the settings for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param SubscriberList2 body: (required)
        :return: SubscriberList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_interest_category(self, list_id, interest_category_id, body, **kwargs):  # noqa: E501
        """Update interest category  # noqa: E501

        Update a specific interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_interest_category(list_id, interest_category_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param InterestCategory2 body: (required)
        :return: InterestCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_interest_category_with_http_info(list_id, interest_category_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_interest_category_with_http_info(list_id, interest_category_id, body, **kwargs)  # noqa: E501
            return data

    def update_interest_category_with_http_info(self, list_id, interest_category_id, body, **kwargs):  # noqa: E501
        """Update interest category  # noqa: E501

        Update a specific interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_interest_category_with_http_info(list_id, interest_category_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param InterestCategory2 body: (required)
        :return: InterestCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_interest_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterestCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_interest_category_interest(self, list_id, interest_category_id, interest_id, **kwargs):  # noqa: E501
        """Update interest in category  # noqa: E501

        Update interests or 'group names' for a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_interest_category_interest(list_id, interest_category_id, interest_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param str interest_id: The specific interest or 'group name'. (required)
        :param Interest2 body: 
        :return: Interest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, **kwargs)  # noqa: E501
            return data

    def update_interest_category_interest_with_http_info(self, list_id, interest_category_id, interest_id, **kwargs):  # noqa: E501
        """Update interest in category  # noqa: E501

        Update interests or 'group names' for a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_interest_category_interest_with_http_info(list_id, interest_category_id, interest_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param str interest_id: The specific interest or 'group name'. (required)
        :param Interest2 body: 
        :return: Interest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id', 'interest_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_interest_category_interest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_id' is set
        if ('interest_id' not in params or
                params['interest_id'] is None):
            raise ValueError("Missing the required parameter `interest_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501
        if 'interest_id' in params:
            path_params['interest_id'] = params['interest_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Interest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_list_member(self, list_id, subscriber_hash, body, **kwargs):  # noqa: E501
        """Update list member  # noqa: E501

        Update information for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_member(list_id, subscriber_hash, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param AddListMembers3 body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_list_member_with_http_info(list_id, subscriber_hash, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_list_member_with_http_info(list_id, subscriber_hash, body, **kwargs)  # noqa: E501
            return data

    def update_list_member_with_http_info(self, list_id, subscriber_hash, body, **kwargs):  # noqa: E501
        """Update list member  # noqa: E501

        Update information for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_member_with_http_info(list_id, subscriber_hash, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param AddListMembers3 body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'body', 'skip_merge_validation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_list_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'skip_merge_validation' in params:
            query_params.append(('skip_merge_validation', params['skip_merge_validation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMembers2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_list_member_note(self, list_id, subscriber_hash, note_id, **kwargs):  # noqa: E501
        """Update note  # noqa: E501

        Update a specific note for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_member_note(list_id, subscriber_hash, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str note_id: The id for the note. (required)
        :param MemberNotes2 body: 
        :return: MemberNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_list_member_note_with_http_info(list_id, subscriber_hash, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_list_member_note_with_http_info(list_id, subscriber_hash, note_id, **kwargs)  # noqa: E501
            return data

    def update_list_member_note_with_http_info(self, list_id, subscriber_hash, note_id, **kwargs):  # noqa: E501
        """Update note  # noqa: E501

        Update a specific note for a specific list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_member_note_with_http_info(list_id, subscriber_hash, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param str note_id: The id for the note. (required)
        :param MemberNotes2 body: 
        :return: MemberNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'note_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_list_member_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_list_merge_field(self, list_id, merge_id, body, **kwargs):  # noqa: E501
        """Update merge field  # noqa: E501

        Update a specific merge field in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_merge_field(list_id, merge_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str merge_id: The id for the merge field. (required)
        :param MergeField2 body:  (required)
        :return: MergeField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_list_merge_field_with_http_info(list_id, merge_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_list_merge_field_with_http_info(list_id, merge_id, body, **kwargs)  # noqa: E501
            return data

    def update_list_merge_field_with_http_info(self, list_id, merge_id, body, **kwargs):  # noqa: E501
        """Update merge field  # noqa: E501

        Update a specific merge field in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_merge_field_with_http_info(list_id, merge_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str merge_id: The id for the merge field. (required)
        :param MergeField2 body:  (required)
        :return: MergeField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'merge_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_list_merge_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'merge_id' is set
        if ('merge_id' not in params or
                params['merge_id'] is None):
            raise ValueError("Missing the required parameter `merge_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'merge_id' in params:
            path_params['merge_id'] = params['merge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/merge-fields/{merge_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MergeField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_segment(self, list_id, segment_id, body, **kwargs):  # noqa: E501
        """Update segment  # noqa: E501

        Update a specific segment in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_segment(list_id, segment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param List8 body: (required)
        :return: List6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_segment_with_http_info(list_id, segment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_segment_with_http_info(list_id, segment_id, body, **kwargs)  # noqa: E501
            return data

    def update_segment_with_http_info(self, list_id, segment_id, body, **kwargs):  # noqa: E501
        """Update segment  # noqa: E501

        Update a specific segment in a list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_segment_with_http_info(list_id, segment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param List8 body: (required)
        :return: List6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'segment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params or
                params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments/{segment_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_list_webhook(self, list_id, webhook_id, body, **kwargs):  # noqa: E501
        """Update webhook  # noqa: E501

        Update the settings for an existing webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_webhook(list_id, webhook_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str webhook_id: The webhook's id. (required)
        :param AddWebhook1 body:  (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_list_webhook_with_http_info(list_id, webhook_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_list_webhook_with_http_info(list_id, webhook_id, body, **kwargs)  # noqa: E501
            return data

    def update_list_webhook_with_http_info(self, list_id, webhook_id, body, **kwargs):  # noqa: E501
        """Update webhook  # noqa: E501

        Update the settings for an existing webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_webhook_with_http_info(list_id, webhook_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str webhook_id: The webhook's id. (required)
        :param AddWebhook1 body:  (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'webhook_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_list_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'webhook_id' is set
        if ('webhook_id' not in params or
                params['webhook_id'] is None):
            raise ValueError("Missing the required parameter `webhook_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'webhook_id' in params:
            path_params['webhook_id'] = params['webhook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/webhooks/{webhook_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWebhooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_list_member_event(self, list_id, subscriber_hash, body, **kwargs):  # noqa: E501
        """Add event  # noqa: E501

        Add an event for a list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_member_event(list_id, subscriber_hash, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts email addresses. (required)
        :param Events body:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_list_member_event_with_http_info(list_id, subscriber_hash, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_list_member_event_with_http_info(list_id, subscriber_hash, body, **kwargs)  # noqa: E501
            return data

    def create_list_member_event_with_http_info(self, list_id, subscriber_hash, body, **kwargs):  # noqa: E501
        """Add event  # noqa: E501

        Add an event for a list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_member_event_with_http_info(list_id, subscriber_hash, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts email addresses. (required)
        :param Events body:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_list_member_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_list_member_tags(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Add or remove member tags  # noqa: E501

        Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_member_tags(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param MemberTags body: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_list_member_tags_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.update_list_member_tags_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def update_list_member_tags_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Add or remove member tags  # noqa: E501

        Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_member_tags_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param MemberTags body: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_list_member_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_list(self, body, **kwargs):  # noqa: E501
        """Add list  # noqa: E501

        Create a new list in your Mailchimp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubscriberList1 body: (required)
        :return: SubscriberList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add list  # noqa: E501

        Create a new list in your Mailchimp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubscriberList1 body: (required)
        :return: SubscriberList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriberList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_list_members(self, list_id, body, **kwargs):  # noqa: E501
        """Batch subscribe or unsubscibe  # noqa: E501

        Batch subscribe or unsubscribe list members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_list_members(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param MembersToSubscribeUnsubscribeTofromAListInBatch body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :param bool skip_duplicate_check: If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to False.
        :return: BatchUpdateListMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_list_members_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_list_members_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def batch_list_members_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Batch subscribe or unsubscibe  # noqa: E501

        Batch subscribe or unsubscribe list members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_list_members_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param MembersToSubscribeUnsubscribeTofromAListInBatch body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :param bool skip_duplicate_check: If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to False.
        :return: BatchUpdateListMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body', 'skip_merge_validation', 'skip_duplicate_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_list_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'skip_merge_validation' in params:
            query_params.append(('skip_merge_validation', params['skip_merge_validation']))  # noqa: E501
        if 'skip_duplicate_check' in params:
            query_params.append(('skip_duplicate_check', params['skip_duplicate_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchUpdateListMembers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_list_interest_category(self, list_id, body, **kwargs):  # noqa: E501
        """Add interest category  # noqa: E501

        Create a new interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_interest_category(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param InterestCategory1 body: (required)
        :return: InterestCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_list_interest_category_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_list_interest_category_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def create_list_interest_category_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Add interest category  # noqa: E501

        Create a new interest category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_interest_category_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param InterestCategory1 body: (required)
        :return: InterestCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_list_interest_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterestCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_interest_category_interest(self, list_id, interest_category_id, body, **kwargs):  # noqa: E501
        """Add interest in category  # noqa: E501

        Create a new interest or 'group name' for a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_interest_category_interest(list_id, interest_category_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param Interest1 body: (required)
        :return: Interest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_interest_category_interest_with_http_info(list_id, interest_category_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_interest_category_interest_with_http_info(list_id, interest_category_id, body, **kwargs)  # noqa: E501
            return data

    def create_interest_category_interest_with_http_info(self, list_id, interest_category_id, body, **kwargs):  # noqa: E501
        """Add interest in category  # noqa: E501

        Create a new interest or 'group name' for a specific category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_interest_category_interest_with_http_info(list_id, interest_category_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str interest_category_id: The unique ID for the interest category. (required)
        :param Interest1 body: (required)
        :return: Interest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'interest_category_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_interest_category_interest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'interest_category_id' is set
        if ('interest_category_id' not in params or
                params['interest_category_id'] is None):
            raise ValueError("Missing the required parameter `interest_category_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'interest_category_id' in params:
            path_params['interest_category_id'] = params['interest_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Interest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_list_member(self, list_id, body, **kwargs):  # noqa: E501
        """Add member to list  # noqa: E501

        Add a new member to the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_list_member(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param AddListMembers1 body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_list_member_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_list_member_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def add_list_member_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Add member to list  # noqa: E501

        Add a new member to the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_list_member_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param AddListMembers1 body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body', 'skip_merge_validation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_list_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'skip_merge_validation' in params:
            query_params.append(('skip_merge_validation', params['skip_merge_validation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMembers2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_list_member_permanent(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Delete list member  # noqa: E501

        Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_member_permanent(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_list_member_permanent_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_list_member_permanent_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def delete_list_member_permanent_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Delete list member  # noqa: E501

        Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_list_member_permanent_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_list_member_permanent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_list_member_note(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Add member note  # noqa: E501

        Add a new note for a specific subscriber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_member_note(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param MemberNotes1 body: 
        :return: MemberNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_list_member_note_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.create_list_member_note_with_http_info(list_id, subscriber_hash, **kwargs)  # noqa: E501
            return data

    def create_list_member_note_with_http_info(self, list_id, subscriber_hash, **kwargs):  # noqa: E501
        """Add member note  # noqa: E501

        Add a new note for a specific subscriber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_member_note_with_http_info(list_id, subscriber_hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param MemberNotes1 body: 
        :return: MemberNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_list_member_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_list_merge_field(self, list_id, body, **kwargs):  # noqa: E501
        """Add merge field  # noqa: E501

        Add a new merge field for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_list_merge_field(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param MergeField1 body:  (required)
        :return: MergeField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_list_merge_field_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_list_merge_field_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def add_list_merge_field_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Add merge field  # noqa: E501

        Add a new merge field for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_list_merge_field_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param MergeField1 body:  (required)
        :return: MergeField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_list_merge_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/merge-fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MergeField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_segment(self, list_id, body, **kwargs):  # noqa: E501
        """Add segment  # noqa: E501

        Create a new segment in a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_segment(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param List7 body: (required)
        :return: List6
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_segment_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_segment_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def create_segment_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Add segment  # noqa: E501

        Create a new segment in a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_segment_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param List7 body: (required)
        :return: List6
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List6',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_segment_members(self, body, list_id, segment_id, **kwargs):  # noqa: E501
        """Batch add or remove members  # noqa: E501

        Batch add/remove list members to static segment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_segment_members(body, list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MembersToAddremoveTofromAStaticSegment body:  (required)
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :return: BatchAddremoveListMembersTofromStaticSegment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_segment_members_with_http_info(body, list_id, segment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_segment_members_with_http_info(body, list_id, segment_id, **kwargs)  # noqa: E501
            return data

    def batch_segment_members_with_http_info(self, body, list_id, segment_id, **kwargs):  # noqa: E501
        """Batch add or remove members  # noqa: E501

        Batch add/remove list members to static segment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_segment_members_with_http_info(body, list_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MembersToAddremoveTofromAStaticSegment body:  (required)
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :return: BatchAddremoveListMembersTofromStaticSegment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'list_id', 'segment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_segment_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params or
                params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments/{segment_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchAddremoveListMembersTofromStaticSegment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_segment_member(self, list_id, segment_id, body, **kwargs):  # noqa: E501
        """Add member to segment  # noqa: E501

        Add a member to a static segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_segment_member(list_id, segment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param Body3 body:  (required)
        :return: ListMembers1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_segment_member_with_http_info(list_id, segment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_segment_member_with_http_info(list_id, segment_id, body, **kwargs)  # noqa: E501
            return data

    def create_segment_member_with_http_info(self, list_id, segment_id, body, **kwargs):  # noqa: E501
        """Add member to segment  # noqa: E501

        Add a member to a static segment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_segment_member_with_http_info(list_id, segment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str segment_id: The unique id for the segment. (required)
        :param Body3 body:  (required)
        :return: ListMembers1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'segment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_segment_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if ('segment_id' not in params or
                params['segment_id'] is None):
            raise ValueError("Missing the required parameter `segment_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments/{segment_id}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMembers1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_list_signup_form(self, list_id, body, **kwargs):  # noqa: E501
        """Customize signup form  # noqa: E501

        Customize a list's default signup form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_signup_form(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param SignupForm1 body:  (required)
        :return: SignupForm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_list_signup_form_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_list_signup_form_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def update_list_signup_form_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Customize signup form  # noqa: E501

        Customize a list's default signup form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_list_signup_form_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param SignupForm1 body:  (required)
        :return: SignupForm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_list_signup_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/signup-forms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignupForm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_list_webhook(self, list_id, body, **kwargs):  # noqa: E501
        """Add webhook  # noqa: E501

        Create a new webhook for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_webhook(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param AddWebhook body:  (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_list_webhook_with_http_info(list_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_list_webhook_with_http_info(list_id, body, **kwargs)  # noqa: E501
            return data

    def create_list_webhook_with_http_info(self, list_id, body, **kwargs):  # noqa: E501
        """Add webhook  # noqa: E501

        Create a new webhook for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_list_webhook_with_http_info(list_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param AddWebhook body:  (required)
        :return: ListWebhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_list_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWebhooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_segments(self, list_id, **kwargs):  # noqa: E501
        """List segments  # noqa: E501

        Get information about all available segments for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_segments(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str type: Limit results based on segment type.
        :param str since_created_at: Restrict results to segments created after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_created_at: Restrict results to segments created before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param bool include_cleaned: Include cleaned members in response
        :param bool include_transactional: Include transactional members in response
        :param bool include_unsubscribed: Include unsubscribed members in response
        :param str since_updated_at: Restrict results to segments update after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_updated_at: Restrict results to segments update before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :return: CollectionOfSegments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_segments_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_segments_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def list_segments_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """List segments  # noqa: E501

        Get information about all available segments for a specific list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_segments_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param list[str] fields: A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
        :param list[str] exclude_fields: A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
        :param int count: The number of records to return. [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **10**. [Maximum value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **1000**
        :param int offset: The number of records from a collection to skip. Iterating over large collections with this parameter can be slow.  [Default value](/developer/guides/get-started-with-mailchimp-api-3/#Parameters) is **0**.
        :param str type: Limit results based on segment type.
        :param str since_created_at: Restrict results to segments created after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_created_at: Restrict results to segments created before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param bool include_cleaned: Include cleaned members in response
        :param bool include_transactional: Include transactional members in response
        :param bool include_unsubscribed: Include unsubscribed members in response
        :param str since_updated_at: Restrict results to segments update after the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :param str before_updated_at: Restrict results to segments update before the set time. We recommend [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time format: 2015-10-21T15:41:36+00:00.
        :return: CollectionOfSegments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'fields', 'exclude_fields', 'count', 'offset', 'type', 'since_created_at', 'before_created_at', 'include_cleaned', 'include_transactional', 'include_unsubscribed', 'since_updated_at', 'before_updated_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_segments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        if 'count' in params and params['count'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling ``, must be a value less than or equal to `1000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'exclude_fields' in params:
            query_params.append(('exclude_fields', params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'csv'  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'since_created_at' in params:
            query_params.append(('since_created_at', params['since_created_at']))  # noqa: E501
        if 'before_created_at' in params:
            query_params.append(('before_created_at', params['before_created_at']))  # noqa: E501
        if 'include_cleaned' in params:
            query_params.append(('include_cleaned', params['include_cleaned']))  # noqa: E501
        if 'include_transactional' in params:
            query_params.append(('include_transactional', params['include_transactional']))  # noqa: E501
        if 'include_unsubscribed' in params:
            query_params.append(('include_unsubscribed', params['include_unsubscribed']))  # noqa: E501
        if 'since_updated_at' in params:
            query_params.append(('since_updated_at', params['since_updated_at']))  # noqa: E501
        if 'before_updated_at' in params:
            query_params.append(('before_updated_at', params['before_updated_at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/segments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfSegments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_segment(self, list_id, **kwargs):  # noqa: E501
        """Preview segment  # noqa: E501

        Preview a segment of users by sending conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_segment(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param Body4 body: 
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_segment_with_http_info(list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_segment_with_http_info(list_id, **kwargs)  # noqa: E501
            return data

    def preview_segment_with_http_info(self, list_id, **kwargs):  # noqa: E501
        """Preview segment  # noqa: E501

        Preview a segment of users by sending conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_segment_with_http_info(list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param Body4 body: 
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/preview-segment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMembers2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_list_member(self, list_id, subscriber_hash, body, **kwargs):  # noqa: E501
        """Add or update list member  # noqa: E501

        Add or update a list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_list_member(list_id, subscriber_hash, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param AddListMembers2 body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_list_member_with_http_info(list_id, subscriber_hash, body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_list_member_with_http_info(list_id, subscriber_hash, body, **kwargs)  # noqa: E501
            return data

    def set_list_member_with_http_info(self, list_id, subscriber_hash, body, **kwargs):  # noqa: E501
        """Add or update list member  # noqa: E501

        Add or update a list member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_list_member_with_http_info(list_id, subscriber_hash, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str list_id: The unique ID for the list. (required)
        :param str subscriber_hash: The MD5 hash of the lowercase version of the list member's email address. (required)
        :param AddListMembers2 body:  (required)
        :param bool skip_merge_validation: If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to False.
        :return: ListMembers2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_id', 'subscriber_hash', 'body', 'skip_merge_validation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_list_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_id' is set
        if ('list_id' not in params or
                params['list_id'] is None):
            raise ValueError("Missing the required parameter `list_id` when calling ``")  # noqa: E501
        # verify the required parameter 'subscriber_hash' is set
        if ('subscriber_hash' not in params or
                params['subscriber_hash'] is None):
            raise ValueError("Missing the required parameter `subscriber_hash` when calling ``")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling ``")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'list_id' in params:
            path_params['list_id'] = params['list_id']  # noqa: E501
        if 'subscriber_hash' in params:
            path_params['subscriber_hash'] = params['subscriber_hash']  # noqa: E501

        query_params = []
        if 'skip_merge_validation' in params:
            query_params.append(('skip_merge_validation', params['skip_merge_validation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{list_id}/members/{subscriber_hash}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListMembers2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
